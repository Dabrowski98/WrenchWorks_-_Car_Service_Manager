// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WrenchWorks.Data;

#nullable disable

namespace WrenchWorks.Migrations
{
    [DbContext(typeof(WrenchWorksDbContext))]
    [Migration("20230218124240_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WrenchWorks.Models.Address", b =>
                {
                    b.Property<long>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("addressID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AddressId"));

                    b.Property<string>("BuildingNo")
                        .IsRequired()
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("buildingNo");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("city");

                    b.Property<string>("FlatNo")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("flatNo");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("postCode");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("region");

                    b.Property<string>("Street")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("street");

                    b.HasKey("AddressId")
                        .HasName("PK_addresses_addressID");

                    b.ToTable("addresses", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.BodyColor", b =>
                {
                    b.Property<string>("Color")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("color");

                    b.HasKey("Color")
                        .HasName("PK_bodyColors_color");

                    b.ToTable("bodyColors", (string)null);

                    b.HasData(
                        new
                        {
                            Color = "Red"
                        },
                        new
                        {
                            Color = "Blue"
                        },
                        new
                        {
                            Color = "Green"
                        },
                        new
                        {
                            Color = "Yellow"
                        },
                        new
                        {
                            Color = "Orange"
                        },
                        new
                        {
                            Color = "Black"
                        },
                        new
                        {
                            Color = "White"
                        },
                        new
                        {
                            Color = "Silver"
                        },
                        new
                        {
                            Color = "Gray"
                        },
                        new
                        {
                            Color = "Gold"
                        },
                        new
                        {
                            Color = "Brown"
                        },
                        new
                        {
                            Color = "Purple"
                        },
                        new
                        {
                            Color = "Bronze"
                        },
                        new
                        {
                            Color = "Pink"
                        },
                        new
                        {
                            Color = "Beige"
                        },
                        new
                        {
                            Color = "CUSTOM"
                        });
                });

            modelBuilder.Entity("WrenchWorks.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerID");

                    b.Property<string>("Nip")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("NIP");

                    b.HasKey("CustomerId")
                        .HasName("PK_customers_customerID");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Employee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employeeID");

                    b.Property<DateTime>("DateOfEmployment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateOfEmployment")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("positionName");

                    b.HasKey("EmployeeId")
                        .HasName("PK_employees_employeeID");

                    b.HasIndex("PositionName");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.FuelType", b =>
                {
                    b.Property<string>("Fuel")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("fuel");

                    b.HasKey("Fuel")
                        .HasName("PK_fuelTypes_Fuel");

                    b.ToTable("fuelTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Fuel = "Petrol"
                        },
                        new
                        {
                            Fuel = "Diesel"
                        },
                        new
                        {
                            Fuel = "Electric"
                        },
                        new
                        {
                            Fuel = "Hydrogen"
                        },
                        new
                        {
                            Fuel = "Nuclear"
                        });
                });

            modelBuilder.Entity("WrenchWorks.Models.Part", b =>
                {
                    b.Property<long>("PartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("partID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PartId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("category");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("manufacturer");

                    b.Property<string?>("ManufacturerArtNo")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50)
                        .HasColumnName("manufacturerArtNo");

                    b.Property<string>("PartName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("partName");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasColumnName("price");

                    b.HasKey("PartId")
                        .HasName("PK_parts_partID");

                    b.HasIndex(new[] { "Manufacturer", "ManufacturerArtNo" }, "UNIQ_part")
                        .IsUnique()
                        .HasFilter("[manufacturerArtNo] IS NOT NULL");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Person", b =>
                {
                    b.Property<long>("PersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("personID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PersonId"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("firstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("lastName");

                    b.Property<string>("TelephoneNumber")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("telephoneNumber");

                    b.HasKey("PersonId")
                        .HasName("PK_persons_personID");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.PersonsAddress", b =>
                {
                    b.Property<long>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("personID");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("addressID");

                    b.HasKey("PersonId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("persons_addresses", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Position", b =>
                {
                    b.Property<short>("PositionId")
                        .HasColumnType("smallint")
                        .HasColumnName("positionID");

                    b.Property<string>("PositionName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)")
                        .HasColumnName("positionName");

                    b.Property<decimal>("ServiceHourRate")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("serviceHourRate");

                    b.Property<short?>("SupervisorId")
                        .HasColumnType("smallint")
                        .HasColumnName("supervisorID");

                    b.HasKey("PositionId")
                        .HasName("PK_positions_position");

                    b.HasIndex("SupervisorId");

                    b.HasIndex(new[] { "PositionName" }, "UNIQ_position")
                        .IsUnique();

                    b.ToTable("positions", (string)null);

                    b.HasData(
                        new
                        {
                            PositionId = (short)9,
                            PositionName = "Trainee",
                            ServiceHourRate = 0m,
                            SupervisorId = (short)3
                        },
                        new
                        {
                            PositionId = (short)7,
                            PositionName = "Assistant Diagonostic Specialist",
                            ServiceHourRate = 0.3m,
                            SupervisorId = (short)4
                        },
                        new
                        {
                            PositionId = (short)8,
                            PositionName = "Assistant Automotive Specialist",
                            ServiceHourRate = 0.3m,
                            SupervisorId = (short)6
                        },
                        new
                        {
                            PositionId = (short)6,
                            PositionName = "Automotive Specialist",
                            ServiceHourRate = 0.6m,
                            SupervisorId = (short)3
                        },
                        new
                        {
                            PositionId = (short)4,
                            PositionName = "Diagonostic Specialist",
                            ServiceHourRate = 0.6m,
                            SupervisorId = (short)3
                        },
                        new
                        {
                            PositionId = (short)5,
                            PositionName = "Quality Specialist",
                            ServiceHourRate = 0.6m,
                            SupervisorId = (short)1
                        },
                        new
                        {
                            PositionId = (short)3,
                            PositionName = "Workshop Manager",
                            ServiceHourRate = 1m,
                            SupervisorId = (short)0
                        },
                        new
                        {
                            PositionId = (short)2,
                            PositionName = "Parts Manager",
                            ServiceHourRate = 1m,
                            SupervisorId = (short)0
                        },
                        new
                        {
                            PositionId = (short)1,
                            PositionName = "Quality Engineer",
                            ServiceHourRate = 1m,
                            SupervisorId = (short)0
                        },
                        new
                        {
                            PositionId = (short)0,
                            PositionName = "Owner",
                            ServiceHourRate = 1m
                        });
                });

            modelBuilder.Entity("WrenchWorks.Models.PowerSource", b =>
                {
                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("char(17)")
                        .HasColumnName("VIN")
                        .IsFixedLength();

                    b.Property<bool>("Biofuel")
                        .HasColumnType("bit")
                        .HasColumnName("biofuel");

                    b.Property<bool>("Cng")
                        .HasColumnType("bit")
                        .HasColumnName("CNG");

                    b.Property<bool>("Hybrid")
                        .HasColumnType("bit")
                        .HasColumnName("hybrid");

                    b.Property<bool>("Lpg")
                        .HasColumnType("bit")
                        .HasColumnName("LPG");

                    b.Property<string>("MainPowerSourceType")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("mainPowerSourceType");

                    b.HasKey("Vin")
                        .HasName("PK_powerSources_VIN");

                    b.HasIndex("MainPowerSourceType");

                    b.ToTable("powerSources", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Service", b =>
                {
                    b.Property<long>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("serviceID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ServiceId"));

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customerID");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employeeID");

                    b.Property<bool>("PaidOff")
                        .HasColumnType("bit")
                        .HasColumnName("paidOff");

                    b.Property<DateTime?>("ServiceEndDate")
                        .HasColumnType("date")
                        .HasColumnName("serviceEndDate");

                    b.Property<DateTime>("ServiceStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("serviceStartDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("char(17)")
                        .HasColumnName("VIN")
                        .IsFixedLength();

                    b.HasKey("ServiceId")
                        .HasName("PK_services_serviceID");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Vin");

                    b.ToTable("services", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Task", b =>
                {
                    b.Property<long>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("taskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TaskId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<decimal>("ExecutionTime")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("executionTime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<long>("ServiceId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceID");

                    b.HasKey("TaskId")
                        .HasName("PK_tasks_taskID");

                    b.HasIndex("ServiceId");

                    b.ToTable("tasks", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.TasksEmployee", b =>
                {
                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint")
                        .HasColumnName("employeeID");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("taskID");

                    b.HasKey("EmployeeId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("tasks_employees", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.TasksPart", b =>
                {
                    b.Property<long>("PartId")
                        .HasColumnType("bigint")
                        .HasColumnName("partID");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint")
                        .HasColumnName("taskID");

                    b.HasKey("PartId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("tasks_parts", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Vehicle", b =>
                {
                    b.Property<string>("Vin")
                        .HasMaxLength(17)
                        .IsUnicode(false)
                        .HasColumnType("char(17)")
                        .HasColumnName("VIN")
                        .IsFixedLength();

                    b.Property<string>("BodyColor")
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("bodyColor");

                    b.Property<decimal?>("EngineCapacity")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("engineCapacity");

                    b.Property<string>("EngineNo")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("engineNo");

                    b.Property<string>("Maker")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("maker");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("model");

                    b.Property<long?>("PersonId")
                        .HasColumnType("bigint")
                        .HasColumnName("personID");

                    b.Property<string>("PowerSource")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("powerSource");

                    b.Property<DateTime>("YearOfProduction")
                        .HasColumnType("date")
                        .HasColumnName("yearOfProduction");

                    b.HasKey("Vin")
                        .HasName("PK_vehicles_VIN");

                    b.HasIndex("BodyColor");

                    b.HasIndex("PersonId");

                    b.ToTable("vehicles", (string)null);
                });

            modelBuilder.Entity("WrenchWorks.Models.Customer", b =>
                {
                    b.HasOne("WrenchWorks.Models.Person", "CustomerNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("WrenchWorks.Models.Customer", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("personIsCustomer");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("WrenchWorks.Models.Employee", b =>
                {
                    b.HasOne("WrenchWorks.Models.Person", "EmployeeNavigation")
                        .WithOne("Employee")
                        .HasForeignKey("WrenchWorks.Models.Employee", "EmployeeId")
                        .IsRequired()
                        .HasConstraintName("personIsEmployee");

                    b.HasOne("WrenchWorks.Models.Position", "PositionNameNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("PositionName")
                        .HasPrincipalKey("PositionName")
                        .IsRequired()
                        .HasConstraintName("employeeWorksOnPosition");

                    b.Navigation("EmployeeNavigation");

                    b.Navigation("PositionNameNavigation");
                });

            modelBuilder.Entity("WrenchWorks.Models.PersonsAddress", b =>
                {
                    b.HasOne("WrenchWorks.Models.Address", "Address")
                        .WithMany("PersonsAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("definesAddressesPerson");

                    b.HasOne("WrenchWorks.Models.Person", "Person")
                        .WithMany("PersonsAddresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("definesPersonsAddress");

                    b.Navigation("Address");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("WrenchWorks.Models.Position", b =>
                {
                    b.HasOne("WrenchWorks.Models.Position", "Supervisor")
                        .WithMany("InverseSupervisor")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("isSupervisor");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("WrenchWorks.Models.PowerSource", b =>
                {
                    b.HasOne("WrenchWorks.Models.FuelType", "MainPowerSourceTypeNavigation")
                        .WithMany("PowerSources")
                        .HasForeignKey("MainPowerSourceType")
                        .IsRequired()
                        .HasConstraintName("powerSourceType");

                    b.Navigation("MainPowerSourceTypeNavigation");
                });

            modelBuilder.Entity("WrenchWorks.Models.Service", b =>
                {
                    b.HasOne("WrenchWorks.Models.Customer", "Customer")
                        .WithMany("Services")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("customerOrdersService");

                    b.HasOne("WrenchWorks.Models.Employee", "Employee")
                        .WithMany("Services")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("empResponsibleForService");

                    b.HasOne("WrenchWorks.Models.Vehicle", "VinNavigation")
                        .WithMany("Services")
                        .HasForeignKey("Vin")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("serviceAssignedToVehicle");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("WrenchWorks.Models.Task", b =>
                {
                    b.HasOne("WrenchWorks.Models.Service", "Service")
                        .WithMany("Tasks")
                        .HasForeignKey("ServiceId")
                        .IsRequired()
                        .HasConstraintName("serviceConsistsOfTasks");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("WrenchWorks.Models.TasksEmployee", b =>
                {
                    b.HasOne("WrenchWorks.Models.Employee", "Employee")
                        .WithMany("TasksEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("definesEmployeeTask");

                    b.HasOne("WrenchWorks.Models.Task", "Task")
                        .WithMany("TasksEmployees")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("definesTaskEmployee");

                    b.Navigation("Employee");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WrenchWorks.Models.TasksPart", b =>
                {
                    b.HasOne("WrenchWorks.Models.Part", "Part")
                        .WithMany("TasksParts")
                        .HasForeignKey("PartId")
                        .IsRequired()
                        .HasConstraintName("definesPartTask");

                    b.HasOne("WrenchWorks.Models.Task", "Task")
                        .WithMany("TasksParts")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("definesTaskPart");

                    b.Navigation("Part");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("WrenchWorks.Models.Vehicle", b =>
                {
                    b.HasOne("WrenchWorks.Models.BodyColor", "BodyColorNavigation")
                        .WithMany("Vehicles")
                        .HasForeignKey("BodyColor")
                        .HasConstraintName("vehicleHasBodyColor");

                    b.HasOne("WrenchWorks.Models.Person", "Person")
                        .WithMany("Vehicles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("personHasVehicle");

                    b.HasOne("WrenchWorks.Models.PowerSource", "VinNavigation")
                        .WithOne("Vehicle")
                        .HasForeignKey("WrenchWorks.Models.Vehicle", "Vin")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vehicleHasPowerSources");

                    b.Navigation("BodyColorNavigation");

                    b.Navigation("Person");

                    b.Navigation("VinNavigation");
                });

            modelBuilder.Entity("WrenchWorks.Models.Address", b =>
                {
                    b.Navigation("PersonsAddresses");
                });

            modelBuilder.Entity("WrenchWorks.Models.BodyColor", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("WrenchWorks.Models.Customer", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("WrenchWorks.Models.Employee", b =>
                {
                    b.Navigation("Services");

                    b.Navigation("TasksEmployees");
                });

            modelBuilder.Entity("WrenchWorks.Models.FuelType", b =>
                {
                    b.Navigation("PowerSources");
                });

            modelBuilder.Entity("WrenchWorks.Models.Part", b =>
                {
                    b.Navigation("TasksParts");
                });

            modelBuilder.Entity("WrenchWorks.Models.Person", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("PersonsAddresses");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("WrenchWorks.Models.Position", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("InverseSupervisor");
                });

            modelBuilder.Entity("WrenchWorks.Models.PowerSource", b =>
                {
                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("WrenchWorks.Models.Service", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("WrenchWorks.Models.Task", b =>
                {
                    b.Navigation("TasksEmployees");

                    b.Navigation("TasksParts");
                });

            modelBuilder.Entity("WrenchWorks.Models.Vehicle", b =>
                {
                    b.Navigation("Services");
                });
#pragma warning restore 612, 618
        }
    }
}
